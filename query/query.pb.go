// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query/query.proto

package query

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SimpleQuery struct {
	Index                int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleQuery) Reset()         { *m = SimpleQuery{} }
func (m *SimpleQuery) String() string { return proto.CompactTextString(m) }
func (*SimpleQuery) ProtoMessage()    {}
func (*SimpleQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf5d1f792f5992be, []int{0}
}

func (m *SimpleQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleQuery.Unmarshal(m, b)
}
func (m *SimpleQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleQuery.Marshal(b, m, deterministic)
}
func (m *SimpleQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleQuery.Merge(m, src)
}
func (m *SimpleQuery) XXX_Size() int {
	return xxx_messageInfo_SimpleQuery.Size(m)
}
func (m *SimpleQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleQuery proto.InternalMessageInfo

func (m *SimpleQuery) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryResponse struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf5d1f792f5992be, []int{1}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*SimpleQuery)(nil), "query.SimpleQuery")
	proto.RegisterType((*QueryResponse)(nil), "query.QueryResponse")
}

func init() { proto.RegisterFile("query/query.proto", fileDescriptor_bf5d1f792f5992be) }

var fileDescriptor_bf5d1f792f5992be = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2c, 0x4d, 0x2d,
	0xaa, 0xd4, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x8e, 0x92, 0x32,
	0x17, 0x77, 0x70, 0x66, 0x6e, 0x41, 0x4e, 0x6a, 0x20, 0x88, 0x2b, 0x24, 0xc2, 0xc5, 0x9a, 0x99,
	0x97, 0x92, 0x5a, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0xe1, 0x28, 0xa9, 0x72, 0xf1,
	0x82, 0xa5, 0x83, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x41, 0xca, 0xca, 0x12, 0x73, 0x4a,
	0x53, 0x61, 0xca, 0xc0, 0x1c, 0x23, 0x6f, 0x2e, 0x1e, 0xb0, 0xb2, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc,
	0xe4, 0x54, 0x21, 0x6b, 0xa8, 0x36, 0x97, 0xc4, 0x92, 0xc4, 0xa4, 0xc4, 0xe2, 0x54, 0x21, 0x21,
	0x3d, 0x88, 0x0b, 0x90, 0x6c, 0x94, 0x12, 0x81, 0x8a, 0xa1, 0x58, 0xa0, 0xc4, 0xe0, 0x24, 0x1c,
	0x25, 0x98, 0x5a, 0x91, 0x08, 0x52, 0xa7, 0x97, 0x9c, 0x9f, 0x0b, 0x71, 0x7a, 0x12, 0x1b, 0xd8,
	0xed, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x1c, 0xa9, 0x1a, 0xd0, 0x00, 0x00, 0x00,
}
