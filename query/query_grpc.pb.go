// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: query/query.proto

package query

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	//rpc QueryDatabase (SimpleQuery) returns (QueryResponse) {}
	SingleQuery(ctx context.Context, in *CuckooBucketQuery, opts ...grpc.CallOption) (*CuckooBucketResponse, error)
	ContinuousQuery(ctx context.Context, opts ...grpc.CallOption) (QueryService_ContinuousQueryClient, error)
	GetHashTableInfo(ctx context.Context, in *HashTableInfoQuery, opts ...grpc.CallOption) (*HashTableInfoResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) SingleQuery(ctx context.Context, in *CuckooBucketQuery, opts ...grpc.CallOption) (*CuckooBucketResponse, error) {
	out := new(CuckooBucketResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/SingleQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ContinuousQuery(ctx context.Context, opts ...grpc.CallOption) (QueryService_ContinuousQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], "/query.QueryService/ContinuousQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceContinuousQueryClient{stream}
	return x, nil
}

type QueryService_ContinuousQueryClient interface {
	Send(*BatchedCuckooBucketQuery) error
	Recv() (*BatchedCuckooBucketResponse, error)
	grpc.ClientStream
}

type queryServiceContinuousQueryClient struct {
	grpc.ClientStream
}

func (x *queryServiceContinuousQueryClient) Send(m *BatchedCuckooBucketQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryServiceContinuousQueryClient) Recv() (*BatchedCuckooBucketResponse, error) {
	m := new(BatchedCuckooBucketResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) GetHashTableInfo(ctx context.Context, in *HashTableInfoQuery, opts ...grpc.CallOption) (*HashTableInfoResponse, error) {
	out := new(HashTableInfoResponse)
	err := c.cc.Invoke(ctx, "/query.QueryService/GetHashTableInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	//rpc QueryDatabase (SimpleQuery) returns (QueryResponse) {}
	SingleQuery(context.Context, *CuckooBucketQuery) (*CuckooBucketResponse, error)
	ContinuousQuery(QueryService_ContinuousQueryServer) error
	GetHashTableInfo(context.Context, *HashTableInfoQuery) (*HashTableInfoResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) SingleQuery(context.Context, *CuckooBucketQuery) (*CuckooBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleQuery not implemented")
}
func (UnimplementedQueryServiceServer) ContinuousQuery(QueryService_ContinuousQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ContinuousQuery not implemented")
}
func (UnimplementedQueryServiceServer) GetHashTableInfo(context.Context, *HashTableInfoQuery) (*HashTableInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashTableInfo not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_SingleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CuckooBucketQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).SingleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/SingleQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).SingleQuery(ctx, req.(*CuckooBucketQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ContinuousQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServiceServer).ContinuousQuery(&queryServiceContinuousQueryServer{stream})
}

type QueryService_ContinuousQueryServer interface {
	Send(*BatchedCuckooBucketResponse) error
	Recv() (*BatchedCuckooBucketQuery, error)
	grpc.ServerStream
}

type queryServiceContinuousQueryServer struct {
	grpc.ServerStream
}

func (x *queryServiceContinuousQueryServer) Send(m *BatchedCuckooBucketResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryServiceContinuousQueryServer) Recv() (*BatchedCuckooBucketQuery, error) {
	m := new(BatchedCuckooBucketQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QueryService_GetHashTableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashTableInfoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetHashTableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.QueryService/GetHashTableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetHashTableInfo(ctx, req.(*HashTableInfoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleQuery",
			Handler:    _QueryService_SingleQuery_Handler,
		},
		{
			MethodName: "GetHashTableInfo",
			Handler:    _QueryService_GetHashTableInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ContinuousQuery",
			Handler:       _QueryService_ContinuousQuery_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "query/query.proto",
}
